ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(pos1, .keep_all = T)%>%
arrange(chr1, pos1)
true <- lapply(tp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)%>%
filter(classification != "BND")%>%
distinct(ID, .keep_all = T)%>%
group_by(CHROM, POS, pos2)%>%
mutate(n=n())%>%
ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(POS, .keep_all = T)%>%
arrange(CHROM, POS)
View(true)
## filter applied: pass, no support reads from normal sample, at least 2 support reads
## to inplement: sv size > insert size (317)
## within 6bp is considered same event
readsv <- function(path){
svt <- read.table(path, quote="\"")
sample_id <- gsub(".*\\/(.*).vcf","\\1",path)
colnames(svt) <- c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "normal", "tumor")
tmp <- svt %>%
dplyr::rename("chr1" = "CHROM", "pos1" = "POS")%>%
filter(FILTER == "PASS")%>%
#FORMAT == "PR:SR")%>%
mutate(classification = gsub(".*SVTYPE=(\\w+).*","\\1", INFO),
chr2 = ifelse(classification == "BND", gsub(":.*", "", ALT), chr1),
chr2 = ifelse(classification == "BND", gsub(".*\\[|\\]", "", chr2), chr1),
chr2 = ifelse(classification == "BND", gsub("[A,T,G,C]+", "", chr2), chr1),
pos2 = gsub(".*:(\\d+).*","\\1", ALT),
pos2 = ifelse(grepl("\\d+", pos2), pos2, gsub("END=(\\d+).*","\\1",INFO)),
pos2 = as.integer(pos2),
length = abs(pos1-pos2),
ID = gsub(":\\d$","",ID),
## here, sum the spanning and split read
PR = gsub(":.*$", "", tumor),
SR = ifelse(FORMAT == "PR", "0,0", gsub("^.*:", "", tumor)),
NPR = gsub(":.*$", "", normal),
NSR = ifelse(FORMAT == "PR", "0,0", gsub("^.*:", "", normal)),
anpr = gsub("\\d+,","", NPR),
ansr = gsub("\\d+,","", NSR),
rpr = gsub(",\\d+","", PR),
apr = gsub("\\d+,","", PR),
rsr = gsub(",\\d+","", SR),
asr = gsub("\\d+,","", SR),
ref = as.numeric(rpr)+as.numeric(rsr),
alt = as.numeric(apr)+as.numeric(asr),
sample = sample_id,
row = as.integer(row_number()))%>%
filter(classification != "INS")%>%
filter(alt > 2)%>%
filter(ansr == 0,
anpr == 0)%>%
filter(length > 317)
out <- tmp %>%
#filter(classification != "BND")%>%
rowwise()%>%
## try to lable reciprocal overlapping sv (set positions within 50bp)
mutate(type = ifelse(any(abs(tmp$pos1[-row]-pos1)<6 & abs(tmp$pos2[-row]-pos2)<6), "y", "n"),
grp = ifelse(type == "y", which(abs(tmp$pos1[-row]-pos1)<6 & abs(tmp$pos2[-row]-pos2)<6),row))%>%
ungroup()%>%
group_by(grp)%>%
## use mean for alt and ref
mutate(alt=round(mean(alt)),
ref=round(mean(ref)))%>%
ungroup()%>%
distinct(grp, .keep_all = T)%>%
select(-c("grp","type","row"))
return(out)
}
true <- lapply(tp, function(x) readsv(x))%>%
do.call(rbind,.)%>%
filter(classification != "INS")%>%
mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", ceiling(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
distinct(ID, .keep_all = T)%>%
group_by(chr1, pos1, chr2,pos2)%>%
mutate(n=n())%>%
ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(pos1, .keep_all = T)%>%
arrange(chr1, pos1)
## filter applied: pass, no support reads from normal sample, at least 2 support reads
## to inplement: sv size > insert size (317)
## within 6bp is considered same event
readsv <- function(path){
svt <- read.table(path, quote="\"")
sample_id <- gsub(".*\\/(.*).vcf","\\1",path)
colnames(svt) <- c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "normal", "tumor")
tmp <- svt %>%
dplyr::rename("chr1" = "CHROM", "pos1" = "POS")%>%
filter(FILTER == "PASS")%>%
#FORMAT == "PR:SR")%>%
mutate(classification = gsub(".*SVTYPE=(\\w+).*","\\1", INFO),
chr2 = ifelse(classification == "BND", gsub(":.*", "", ALT), chr1),
chr2 = ifelse(classification == "BND", gsub(".*\\[|\\]", "", chr2), chr1),
chr2 = ifelse(classification == "BND", gsub("[A,T,G,C]+", "", chr2), chr1),
pos2 = gsub(".*:(\\d+).*","\\1", ALT),
pos2 = ifelse(grepl("\\d+", pos2), pos2, gsub("END=(\\d+).*","\\1",INFO)),
pos2 = as.integer(pos2),
length = abs(pos1-pos2),
ID = gsub(":\\d$","",ID),
## here, sum the spanning and split read
PR = gsub(":.*$", "", tumor),
SR = ifelse(FORMAT == "PR", "0,0", gsub("^.*:", "", tumor)),
NPR = gsub(":.*$", "", normal),
NSR = ifelse(FORMAT == "PR", "0,0", gsub("^.*:", "", normal)),
anpr = gsub("\\d+,","", NPR),
ansr = gsub("\\d+,","", NSR),
rpr = gsub(",\\d+","", PR),
apr = gsub("\\d+,","", PR),
rsr = gsub(",\\d+","", SR),
asr = gsub("\\d+,","", SR),
ref = as.numeric(rpr)+as.numeric(rsr),
alt = as.numeric(apr)+as.numeric(asr),
sample = sample_id,
row = as.integer(row_number()))%>%
filter(classification != "INS")%>%
filter(alt > 2)%>%
filter(ansr == 0,
anpr == 0)%>%
filter(length > 317)
out <- tmp %>%
filter(classification != "BND")%>%
rowwise()%>%
## try to lable reciprocal overlapping sv (set positions within 50bp)
mutate(type = ifelse(any(abs(tmp$pos1[-row]-pos1)<6 & abs(tmp$pos2[-row]-pos2)<6), "y", "n"),
grp = ifelse(type == "y", which(abs(tmp$pos1[-row]-pos1)<6 & abs(tmp$pos2[-row]-pos2)<6),row))%>%
ungroup()%>%
group_by(grp)%>%
## use mean for alt and ref
mutate(alt=round(mean(alt)),
ref=round(mean(ref)))%>%
ungroup()%>%
distinct(grp, .keep_all = T)%>%
select(-c("grp","type","row"))
return(out)
}
true <- lapply(tp, function(x) readsv(x))%>%
do.call(rbind,.)%>%
filter(classification != "INS")%>%
mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", ceiling(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
distinct(ID, .keep_all = T)%>%
group_by(chr1, pos1, chr2,pos2)%>%
mutate(n=n())%>%
ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(pos1, .keep_all = T)%>%
arrange(chr1, pos1)
true <- lapply(tp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)%>%
filter(classification != "BND")%>%
distinct(ID, .keep_all = T)%>%
group_by(CHROM, POS, pos2)%>%
mutate(n=n())%>%
ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(POS, .keep_all = T)%>%
arrange(CHROM, POS)
true %>%
filter(sample == "gM")%>%
ggplot()+
geom_boxplot(aes(x = classification, y = svcf))+
facet_wrap(~sample, scale="free")
true %>%
filter(sample == "gM")%>%
ggplot()+
geom_boxplot(aes(x = classification, y = svcf))+
facet_wrap(~sample, scale="free")
View(true)
## filter applied: pass, no support reads from normal sample, at least 2 support reads
## to inplement: sv size > insert size (317)
## within 6bp is considered same event
readsv <- function(path){
svt <- read.table(path, quote="\"")
sample_id <- gsub(".*\\/(.*).vcf","\\1",path)
colnames(svt) <- c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "normal", "tumor")
tmp <- svt %>%
dplyr::rename("chr1" = "CHROM", "pos1" = "POS")%>%
filter(FILTER == "PASS")%>%
#FORMAT == "PR:SR")%>%
mutate(classification = gsub(".*SVTYPE=(\\w+).*","\\1", INFO),
chr2 = ifelse(classification == "BND", gsub(":.*", "", ALT), chr1),
chr2 = ifelse(classification == "BND", gsub(".*\\[|\\]", "", chr2), chr1),
chr2 = ifelse(classification == "BND", gsub("[A,T,G,C]+", "", chr2), chr1),
pos2 = gsub(".*:(\\d+).*","\\1", ALT),
pos2 = ifelse(grepl("\\d+", pos2), pos2, gsub("END=(\\d+).*","\\1",INFO)),
pos2 = as.integer(pos2),
length = abs(pos1-pos2),
ID = gsub(":\\d$","",ID),
## here, sum the spanning and split read
PR = gsub(":.*$", "", tumor),
SR = ifelse(FORMAT == "PR", "0,0", gsub("^.*:", "", tumor)),
NPR = gsub(":.*$", "", normal),
NSR = ifelse(FORMAT == "PR", "0,0", gsub("^.*:", "", normal)),
anpr = gsub("\\d+,","", NPR),
ansr = gsub("\\d+,","", NSR),
rpr = gsub(",\\d+","", PR),
apr = gsub("\\d+,","", PR),
rsr = gsub(",\\d+","", SR),
asr = gsub("\\d+,","", SR),
ref = as.numeric(rpr)+as.numeric(rsr),
alt = as.numeric(apr)+as.numeric(asr),
sample = sample_id,
row = as.integer(row_number()))%>%
filter(classification != "INS")%>%
filter(alt > 2)%>%
filter(ansr == 0,
anpr == 0)%>%
filter(length > 317)
out <- tmp %>%
filter(classification != "BND")%>%
rowwise()%>%
## try to lable reciprocal overlapping sv (set positions within 50bp)
mutate(type = ifelse(any(abs(tmp$pos1[-row]-pos1)<6 & abs(tmp$pos2[-row]-pos2)<6), "y", "n"),
grp = ifelse(type == "y", which(abs(tmp$pos1[-row]-pos1)<6 & abs(tmp$pos2[-row]-pos2)<6),row))%>%
ungroup()%>%
group_by(grp)%>%
## use mean for alt and ref
mutate(alt=round(mean(alt)),
ref=round(mean(ref)))%>%
ungroup()%>%
distinct(grp, .keep_all = T)%>%
select(-c("grp","type","row"))
return(out)
}
true <- lapply(tp, function(x) readsv(x))%>%
do.call(rbind,.)%>%
filter(classification != "INS")%>%
mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", ceiling(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
distinct(ID, .keep_all = T)%>%
group_by(chr1, pos1, chr2,pos2)%>%
mutate(n=n())%>%
ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(pos1, .keep_all = T)%>%
arrange(chr1, pos1)
View(true)
true <- lapply(tp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)%>%
filter(classification != "BND")%>%
distinct(ID, .keep_all = T)%>%
group_by(CHROM, POS, pos2)%>%
mutate(n=n())%>%
ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(POS, .keep_all = T)%>%
arrange(CHROM, POS)
View(true)
true <- lapply(tp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)%>%
mutate(sample=gsub("co_true/","",sample))
View(true)
true <- lapply(tp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)%>%
mutate(sample=gsub("co_true/","",sample))%>%
filter(classification != "BND")%>%
group_by(CHROM, POS, pos2)%>%
mutate(n=n())%>%
ungroup() %>%
mutate(clone = ifelse(n == 2, "clonal", sample))%>%
distinct(POS, .keep_all = T)%>%
arrange(CHROM, POS)
true %>%
filter(sample == "gM")%>%
ggplot()+
geom_boxplot(aes(x = classification, y = svcf))+
facet_wrap(~sample, scale="free")
t45 = true %>%
filter(!(grepl('hs', CHROM) | grepl("GL", CHROM)))%>%
mutate(chr1 = ifelse(CHROM == "X", 23,
ifelse(CHROM == "Y", 24, CHROM)),
chr1 = as.numeric(CHROM),
t4 = ifelse(sample == "bM" & CHROM%%2 == 0, 0.6,
ifelse(sample == "bM" & CHROM%%2 == 1, 0.2,
ifelse(sample == "gM" & CHROM%%2 == 1, 0.6, 10))),
t5 = ifelse(sample == "bM" & CHROM%%2 == 0, 0.6,
ifelse(sample == "bM" & CHROM%%2 == 1, 0.2,
ifelse(sample == "gM" & CHROM%%2 == 1, 0.6,
ifelse(sample == "gM" & CHROM%%2 == 0, 0.8, 10)))),
t4 = ifelse(clone == "clonal", 1, t4),
t5 = ifelse(clone == "clonal", 1, t5))
View(true)
t45 = true %>%
filter(!(grepl('hs', CHROM) | grepl("GL", CHROM)))%>%
mutate(CHROM = ifelse(CHROM == "X", 23,
ifelse(CHROM == "Y", 24, CHROM)),
CHROM = as.numeric(CHROM),
t4 = ifelse(sample == "bM" & CHROM%%2 == 0, 0.6,
ifelse(sample == "bM" & CHROM%%2 == 1, 0.2,
ifelse(sample == "gM" & CHROM%%2 == 1, 0.6, 10))),
t5 = ifelse(sample == "bM" & CHROM%%2 == 0, 0.6,
ifelse(sample == "bM" & CHROM%%2 == 1, 0.2,
ifelse(sample == "gM" & CHROM%%2 == 1, 0.6,
ifelse(sample == "gM" & CHROM%%2 == 0, 0.8, 10)))),
t4 = ifelse(clone == "clonal", 1, t4),
t5 = ifelse(clone == "clonal", 1, t5))
mp <- list.files(paste0(path, "in_silico_vcfs"), full.names = T)
# purity: bM(0.49), gM(0.46)
mix <- lapply(mp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)
vcf_path=mp
vcf_path=mp[1]
# load vcf files
vcf=extract_info(vcf_path, tumor_only)
path=mp[]
path=mp[1]
svt <- read.table(path, quote="\"")
mp <- list.files(paste0(path, "in_silico_vcfs"), full.names = T)
path= "/Users/lyz928/Karchin Lab Dropbox/YunZhou Liu/SVCFit-2024/data/EGA/"
tp <- list.files(paste0(path, "in_silico_true"), full.names = T)
mp <- list.files(paste0(path, "in_silico_vcfs"), full.names = T)
# purity: bM(0.49), gM(0.46)
mix <- lapply(mp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)
View(mix)
# purity: bM(0.49), gM(0.46)
mix <- lapply(mp, function(x) SVCFit(x,overlap=TRUE, tumor_only = FALSE))%>%
do.call(rbind,.)%>%
mutate(sample=gsub("cfs/","",sample))
View(mix)
mix3 <- mix %>%
filter(!sample %in% c("4m","5m"))%>%
rowwise()%>%
mutate(vaf = alt/(alt+0.5*ref),
bmr = as.integer(gsub("3m(\\d)(\\d)", "\\1", sample))/10,
gmr = as.integer(gsub("3m(\\d)(\\d)", "\\2", sample))/10,
purity = 0.49*bmr+0.46*gmr,
true_row = ifelse(any(abs(pos1-true$pos1)<6),which(abs(pos1-true$pos1)<6), NA),
clone= true$clone[true_row],
ccf = ifelse(clone == "bM", bmr,
ifelse(clone == "gM", gmr, 1)),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", ceiling(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)),
my_ccf = svcf/purity,
my_ccf = ifelse(my_ccf > 1, 1, my_ccf),
error = ccf-my_ccf)%>%
#filter(my_ccf<=1)%>%
ungroup()%>%
distinct(ID, .keep_all = T)%>%
filter(!is.na(clone))%>%
select(sample, ccf, svcf, my_ccf, error, clone)
View(mix)
mix3 <- mix %>%
filter(!sample %in% c("4m","5m"))%>%
rowwise()%>%
mutate(bmr = as.integer(gsub("3m(\\d)(\\d)", "\\1", sample))/10,
gmr = as.integer(gsub("3m(\\d)(\\d)", "\\2", sample))/10,
purity = 0.49*bmr+0.46*gmr,
true_row = ifelse(any(abs(pos1-true$pos1)<6),which(abs(pos1-true$pos1)<6), NA),
clone= true$clone[true_row],
ccf = ifelse(clone == "bM", bmr,
ifelse(clone == "gM", gmr, 1)),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", ceiling(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)),
my_ccf = svcf/purity,
my_ccf = ifelse(my_ccf > 1, 1, my_ccf),
error = ccf-my_ccf)%>%
#filter(my_ccf<=1)%>%
ungroup()%>%
distinct(ID, .keep_all = T)%>%
filter(!is.na(clone))%>%
select(sample, ccf, svcf, my_ccf, error, clone)
mix3 <- mix %>%
filter(!sample %in% c("4m","5m"))%>%
rowwise()%>%
mutate(bmr = as.integer(gsub("3m(\\d)(\\d)", "\\1", sample))/10,
gmr = as.integer(gsub("3m(\\d)(\\d)", "\\2", sample))/10,
purity = 0.49*bmr+0.46*gmr,
true_row = ifelse(any(abs(POS-true$POS)<6),which(abs(POS-true$POS)<6), NA),
clone= true$clone[true_row],
ccf = ifelse(clone == "bM", bmr,
ifelse(clone == "gM", gmr, 1)),
my_ccf = svcf/purity,
my_ccf = ifelse(my_ccf > 1, 1, my_ccf),
error = ccf-my_ccf)%>%
#filter(my_ccf<=1)%>%
ungroup()%>%
distinct(ID, .keep_all = T)%>%
filter(!is.na(clone))%>%
select(sample, ccf, svcf, my_ccf, error, clone)
View(mix3)
mix45 <- mix %>%
filter(sample %in% c("4m","5m"))%>%
rowwise()%>%
mutate(true_row = ifelse(any(abs(POS-true$POS)<6),which(abs(POS-true$POS)<6), NA),
clone= true$clone[true_row],
ccf = ifelse(sample == "4m", t45$t4[true_row], t45$t5[true_row]),
purity = 0.475,
my_ccf = svcf/purity,
my_ccf = ifelse(my_ccf > 1, 1, my_ccf),
error = ccf-my_ccf)%>%
#filter(my_ccf<=1)%>%
ungroup()%>%
distinct(ID, .keep_all = T)%>%
filter(!is.na(true_row))%>%
select(sample, ccf, svcf, my_ccf, error, clone)
final_dat = rbind(mix3, mix45) %>%
mutate(sample=case_when(
sample == "3m19" ~ "3clus 10-90",
sample == "3m28" ~ "3clus 20-80",
sample == "3m37" ~ "3clus 30-70",
sample == "3m46" ~ "3clus 40-60",
sample == "3m55" ~ "3clus 50-50",
sample == "3m64" ~ "3clus 60-40",
sample == "3m73" ~ "3clus 70-30",
sample == "3m82" ~ "3clus 80-20",
sample == "3m91" ~ "3clus 90-10",
sample == "4m" ~ "4clus",
sample == "5m" ~ "5clus"))
svclone <- c(0.11, 0.11, 0.105, 0.118, 0.12, 0.122, 0.108, 0.124, 0.12, 0.09, 0.105)-0.015
error_summ= final_dat %>%
group_by(sample)%>%
#filter(ccf > 0.3) %>%
summarise(SVCFit = abs(mean(error)))%>%
mutate(SVclone = svclone)%>%
gather(key = method, value = error, 2:3)%>%
#filter(method=="SVclone")%>%
ungroup()%>%
group_by(method)%>%
summarize(sum_err=sum(error))
final_dat %>%
group_by(sample)%>%
#filter(ccf > 0.3) %>%
summarise(SVCFit = abs(mean(error)))%>%
mutate(SVclone = svclone)%>%
gather(key = method, value = error, 2:3)%>%
#filter(method=="SVclone")%>%
ungroup()%>%
ggplot()+
geom_point(aes(x=sample, y = error, color=method))+
geom_line(aes(x=sample, y = error, group = method, color= method))+
scale_y_continuous(limits = c(-0.5, 0.5))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("Mean error")+
xlab("")
final_dat %>%
mutate(tt = paste0(clone,"-",ccf))%>%
# group_by(tt)%>%
# tally()
# group_by(sample) %>%
# summarise(mean=mean(error))
ggplot()+
geom_boxplot(aes(x= tt, y=error))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
final_dat %>%
mutate(tt = paste0(clone,"-",ccf))%>%
# group_by(tt)%>%
# tally()
# group_by(sample) %>%
# summarise(mean=mean(error))
ggplot()+
geom_boxplot(aes(x= tt, y=error))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
final_dat %>%
group_by(sample)%>%
#filter(ccf > 0.3) %>%
summarise(SVCFit = abs(mean(error)))%>%
mutate(SVclone = svclone)%>%
gather(key = method, value = error, 2:3)%>%
#filter(method=="SVclone")%>%
ungroup()%>%
ggplot()+
geom_point(aes(x=sample, y = error, color=method))+
geom_line(aes(x=sample, y = error, group = method, color= method))+
scale_y_continuous(limits = c(-0.5, 0.5))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("Mean error")+
xlab("")
final_dat %>%
group_by(sample)%>%
#filter(ccf > 0.3) %>%
summarise(SVCFit = abs(mean(error)))%>%
mutate(SVclone = svclone)%>%
gather(key = method, value = error, 2:3)%>%
#filter(method=="SVclone")%>%
ungroup()%>%
ggplot()+
geom_point(aes(x=sample, y = error, color=method))+
geom_line(aes(x=sample, y = error, group = method, color= method))+
scale_y_continuous(limits = c(-0.5, 0.5))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("Mean error")+
xlab("")
View(error_summ)
x=final_dat %>%
group_by(sample)%>%
#filter(ccf > 0.3) %>%
summarise(SVCFit = abs(mean(error)))%>%
mutate(SVclone = svclone)%>%
gather(key = method, value = error, 2:3)%>%
#filter(method=="SVclone")%>%
ungroup()%>%
ggplot()+
geom_point(aes(x=sample, y = error, color=method))+
geom_line(aes(x=sample, y = error, group = method, color= method))+
scale_y_continuous(limits = c(-0.5, 0.5))+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("Mean error")+
xlab("")
x
