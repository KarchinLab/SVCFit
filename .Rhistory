out <- test %>%
mutate(sample = gsub(".*\\/(.*).txt","\\1",path),
svcf=pur)
return(out)
}
vf <- lapply(vfp, function(x) read_dep(x))%>%
do.call(rbind,.)%>%
inner_join(tmp)%>%
group_by(id,type,sample)%>%
summarise(fin_dep = max(dep))
read_dep <- function(path){
test <- read.delim(path, header=FALSE)
colnames(test) <- c("chr","loc","dep")
pur=gsub(".*p(\\d+).*","\\1",path)
out <- test %>%
mutate(sample = gsub(".*\\/(.*).txt","\\1",path),
purity=pur)
return(out)
}
vf <- lapply(vfp, function(x) read_dep(x))%>%
do.call(rbind,.)%>%
inner_join(tmp)%>%
group_by(id,type,sample)%>%
summarise(fin_dep = max(dep))
View(vf)
View(vf)
vf <- lapply(vfp, function(x) read_dep(x))%>%
do.call(rbind,.)
View(vf)
vf <- lapply(vfp, function(x) read_dep(x))%>%
do.call(rbind,.)%>%
inner_join(tmp)%>%
group_by(id,type,sample)%>%
summarise(fin_dep = max(dep))
View(vf)
dat_start <- vf %>%
filter(type == "left")%>%
mutate(sample = as.numeric(sample))%>%
rowwise()%>%
mutate(purity = gsub(".*p(\\d+).*","\\1",sample))%>%
group_by(svcf)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()
dat_start <- vf %>%
filter(type == "left")%>%
mutate(sample = as.numeric(sample))%>%
rowwise()%>%
mutate(purity = gsub(".*p(\\d+).*","\\1",sample))%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()
View(vf)
dat_start <- vf %>%
filter(type == "left")%>%
#mutate(sample = as.numeric(sample))%>%
rowwise()%>%
mutate(purity = gsub(".*p(\\d+).*","\\1",sample))%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()
dat_start <- vf %>%
filter(type == "left")%>%
#mutate(sample = as.numeric(sample))%>%
rowwise()%>%
mutate(purity = gsub(".*p(\\d+).*","\\1",sample))%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()
dat_end <- vf %>%
filter(type == "right")%>%
#mutate(sample = as.numeric(sample))%>%
rowwise()%>%
mutate(purity = gsub(".*p(\\d+).*","\\1",sample))%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()
dat <- vf %>%
rowwise()%>%
mutate(purity = gsub(".*p(\\d+).*","\\1",sample))%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()%>%
pivot_wider(names_from = type, values_from = fin_dep)
corl <- round(cor(x=dat_start$purity,y=dat_start$fin_dep, method = "pearson"), digits = 2)
dat_start <- vf %>%
filter(type == "left")%>%
#mutate(sample = as.numeric(sample))%>%
rowwise()%>%
mutate(purity = as.numeric(gsub(".*p(\\d+).*","\\1",sample))/100)%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()
dat_end <- vf %>%
filter(type == "right")%>%
#mutate(sample = as.numeric(sample))%>%
rowwise()%>%
mutate(purity = as.numeric(gsub(".*p(\\d+).*","\\1",sample))/100)%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()
dat <- vf %>%
rowwise()%>%
mutate(purity = as.numeric(gsub(".*p(\\d+).*","\\1",sample))/100)%>%
group_by(purity)%>%
mutate(ave = mean(fin_dep))%>%
ungroup()%>%
pivot_wider(names_from = type, values_from = fin_dep)
corl <- round(cor(x=dat_start$purity,y=dat_start$fin_dep, method = "pearson"), digits = 2)
corr <- round(cor(x=dat_end$purity,y=dat_end$fin_dep, method = "pearson"), digit=2)
corlr <- round(cor(x=dat$purity,y=dat$right, method = "pearson"), digits = 2)
p1=dat_start%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(position = position_jitter(width = .05, seed = 0),
size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.35, y=68, label= paste0("pearson corr: ", corl), size = 15/.pt)+
# stat_poly_eq(formula= y~x,
#              aes(label=paste(..eq.label.., ..rr.label.., sep="~~~")),
#              parse=TRUE)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p2=dat_end%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(position = position_jitter(width = .05, seed = 0),
size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.35, y=68, label= paste0("pearson corr: ", corr), size = 15/.pt)+
# stat_poly_eq(formula= y~x,
#              aes(label=paste(..eq.label.., ..rr.label.., sep="~~~")),
#              parse=TRUE)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p3=dat%>%
ggplot(aes(x=left, y=right))+
geom_point(position = position_jitter(width = .05, seed = 0),
size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=33, y=68, label= paste0("pearson corr: ", corlr), size = 15/.pt)+
xlab("left read depth")+
ylab("right read depth")+
theme_classic()
p1
p1=dat_start%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(#position = position_jitter(width = .05, seed = 0),
size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.35, y=68, label= paste0("pearson corr: ", corl), size = 15/.pt)+
# stat_poly_eq(formula= y~x,
#              aes(label=paste(..eq.label.., ..rr.label.., sep="~~~")),
#              parse=TRUE)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p1
p2=dat_end%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(#position = position_jitter(width = .05, seed = 0),
size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.35, y=68, label= paste0("pearson corr: ", corr), size = 15/.pt)+
# stat_poly_eq(formula= y~x,
#              aes(label=paste(..eq.label.., ..rr.label.., sep="~~~")),
#              parse=TRUE)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p3=dat%>%
ggplot(aes(x=left, y=right))+
geom_point(#position = position_jitter(width = .05, seed = 0),
size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=33, y=68, label= paste0("pearson corr: ", corlr), size = 15/.pt)+
xlab("left read depth")+
ylab("right read depth")+
theme_classic()
p1
p2
p3
corlr <- round(cor(x=dat$left,y=dat$right, method = "pearson"), digits = 2)
View(dat)
View(dat)
corlr <- round(cor(x=dat$left,y=dat$right, method = "pearson"), digits = 2)
p3=dat%>%
ggplot(aes(x=left, y=right))+
geom_point(#position = position_jitter(width = .05, seed = 0),
size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)
p3
setwd("~/Documents/GitHub/SVCFit")
devtools::build_vignettes()
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
head(as_tibble(example_vcf))
file_path <- system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
example_vcf <- read.table(file_path, quote="\"")
colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
head(as_tibble(example_vcf))
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_readme()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_readme()
devtools::check()
p1
p1=dat_start%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.35, y=75, label= paste0("pearson corr: ", corl), size = 15/.pt)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p1
p1=dat_start%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.35, y=80, label= paste0("pearson corr: ", corl), size = 15/.pt)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p1
p1=dat_start%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.35, y=85, label= paste0("pearson corr: ", corl), size = 15/.pt)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p1
p1=dat_start%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.25, y=85, label= paste0("pearson corr: ", corl), size = 15/.pt)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p1
p1=dat_start%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.3, y=85, label= paste0("pearson corr: ", corl), size = 15/.pt)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p1
p2=dat_end%>%
ggplot(aes(x=purity, y=fin_dep))+
geom_point(size = 2, alpha = .3)+
geom_smooth(method="glm", show.legend = T)+
annotate("text", x=0.3, y=85, label= paste0("pearson corr: ", corr), size = 15/.pt)+
xlab("SV purity level (%)")+
ylab("read depth")+
theme_classic()
p2
library(tidyverse)
library(ggpubr) #for stat
library(rstatix) #for stat
library(ggsignif) #for plot significance
source("~/Documents/GitHub/SVCFit/R/extract_info.R")
source("~/Documents/GitHub/SVCFit/R/read_clone.R")
source("~/Documents/GitHub/SVCFit/R/SVCF.R")
source("~/Documents/GitHub/SVCFit/R/check_overlap.R")
source("~/Documents/GitHub/SVCFit/R/attach_clone.R")
source("~/Documents/GitHub/SVCFit/R/calculate_svcf.R")
# svclone_in <- read.delim("/Users/lyz928/Karchin\ Lab\ Dropbox/YunZhou\ Liu/SVCFit-2024/script/sv/svclone_time.txt", header=FALSE)
svclone_in <- read.delim("Figure_1/svclone_time.txt", header=FALSE)
colnames(svclone_in) = c("sample","start","end")
svc = svclone_in %>%
filter(end !="")%>%
mutate(num_sv=as.integer(gsub("speed_(.*)","\\1",sample)),
start = gsub("EST ","",start),
start = gsub(" (.*) ","\\1", start),
end = gsub("EST","",end),
end = gsub(" (.*) ","\\1", end),
start = as.POSIXct(start, format = "%a %b %d %I:%M:%S %p %Y"),
end = as.POSIXct(end, format = "%a %b %d %I:%M:%S %p %Y"),
time = as.numeric(difftime(end, start, units = "secs")),
#time = as.integer(end - start),
method = "svclone")%>%
arrange(num_sv)
svcfit_in <- read.delim("Figure_1/svcfit_time.txt", header=FALSE)
colnames(svcfit_in) = c("sample","start","end")
svcf = svcfit_in %>%
mutate(num_sv=as.integer(gsub("speed_(.*).vcf","\\1",sample)),
start = as.POSIXct(start, format="%a %b %d %H:%M:%S %Y",units = "secs"),
end = as.POSIXct(end, format="%a %b %d %H:%M:%S %Y",units = "secs"),
time = as.integer(end - start),
method = "svcfit") %>%
filter(num_sv %in% svc$num_sv)%>%
arrange(num_sv)
p=rbind(svc, svcf)%>%
#svc%>%
#filter(num_sv<10000)%>%
ggplot(aes(x=num_sv, y = time, color = method, group=method))+
geom_point()+
geom_smooth(method = "glm", aes(color=method),show.legend = FALSE)+
scale_y_log10()+
ylab("time (sec)")+
xlab("number of structural variants")+
theme_bw()+
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
legend.title = element_blank(),
legend.position = "none")+
guides(color = guide_legend(override.aes = list(shape = 15, size = 6)))
p
p=rbind(svc, svcf)%>%
#svc%>%
#filter(num_sv<10000)%>%
ggplot(aes(x=num_sv, y = time, color = method, group=method))+
geom_point()+
geom_smooth(method = "glm", aes(color=method),show.legend = FALSE)+
#scale_y_log10()+
ylab("time (sec)")+
xlab("number of structural variants")+
theme_bw()+
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
legend.title = element_blank(),
legend.position = "none")+
guides(color = guide_legend(override.aes = list(shape = 15, size = 6)))
p
p=rbind(svc, svcf)%>%
#svc%>%
#filter(num_sv<10000)%>%
ggplot(aes(x=num_sv, y = time, color = method, group=method))+
geom_point()+
geom_smooth(method = "glm", aes(color=method),show.legend = FALSE)+
scale_y_log10()+
ylab("time (sec)")+
xlab("number of structural variants")+
theme_bw()+
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
legend.title = element_blank(),
legend.position = "none")+
guides(color = guide_legend(override.aes = list(shape = 15, size = 6)))
p
f1a=combined_svs%>%
mutate(clone_num="single",
clone_por=100)%>%
rbind(combined_svm)%>%
mutate(purity = paste0(gsub(".*p","",sample), "% purity"),
clone_prop = case_when(clone_num == "clone1" ~ "Child 1 (60% tumor cell)",
clone_num == "clone2" ~ "Child 2 (30% tumor cell)",
clone_num == "clone3" ~ "Parent (100% tumor cell)",
clone_num == "single" ~ "Single clone"))%>%
ggplot(aes(x=classification, y=deviation))+
geom_boxplot(aes(color = method, fill=method),alpha = 0.5)+
facet_grid(factor(purity, level = p_levels)~ factor(clone_prop, level = c_levels),scale = "free")+
stat_pvalue_manual(comb_stat, hide.ns = TRUE)+
ylab("Error")+
xlab("Structural variant types")+
theme_bw()+
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
legend.position = "none",
strip.text = element_text(size = 7))
library(tidyverse)
library(ggpubr) #for stat
library(rstatix) #for stat
library(ggsignif) #for plot significance
source("~/Documents/GitHub/SVCFit/R/extract_info.R")
source("~/Documents/GitHub/SVCFit/R/read_clone.R")
source("~/Documents/GitHub/SVCFit/R/SVCF.R")
source("~/Documents/GitHub/SVCFit/R/check_overlap.R")
source("~/Documents/GitHub/SVCFit/R/attach_clone.R")
source("~/Documents/GitHub/SVCFit/R/calculate_svcf.R")
ground_truth="/Users/lyz928/Karchin Lab Dropbox/YunZhou Liu/SVCFit-2024/script/sv/visor/input/"
p <- list.files(ground_truth, pattern = "^c.*.bed", full.names = T)
truth = read_clone(p, mode="heritage")
## get SVCFit data
svmp <- list.files("~/Karchin Lab Dropbox/YunZhou Liu/SVCFit-2024/script/sv/visor/multiple_vcfs",pattern = ".*.vcf", full.names = T)
svsp <- list.files("~/Karchin Lab Dropbox/YunZhou Liu/SVCFit-2024/script/sv/visor/single_vcfs",pattern = ".*.vcf", full.names = T)
svs=lapply(svsp, function(x) SVCF(x, overlap=TRUE, truth_path = p))%>%
do.call(rbind,.)%>%
mutate(method="SVCFit")
svm=lapply(svmp, function(x) SVCF(x, overlap=TRUE, multiple=TRUE, truth_path = p))%>%
do.call(rbind,.)%>%
mutate(method="SVCFit")
## get SVclone data
### create function to gather SVclone output
get_svclone <- function(rdata_path, sv_dat, tolerance=6){
load(rdata_path)
s=gsub(".*(c.*)_cc.*","\\1",rdata_path)
p=as.numeric(gsub("c\\d+p","",s))/100
subset <- sv_dat %>% filter(sample==s)
x=doubleBreakPtsRes[[3]]%>%
mutate(first=gsub("^(.*)_.*","\\1",mutation_id),
second=gsub("^.*_(.*)","\\1",mutation_id),
CHROM=gsub("(.*):\\d+.*","\\1",first),
POS=as.numeric(gsub(".*:(\\d+).*","\\1",first)),
chr2=gsub("(.*):\\d+.*","\\1",second),
pos2=as.numeric(gsub(".*:(\\d+).*","\\1",second)),
## here, try to select the same mutation present in SVCFit
type = any(which(abs(POS-subset$POS)<tolerance & abs(pos2-subset$pos2)<tolerance)),
row=ifelse(type == TRUE,which(abs(POS-subset$POS)<tolerance & abs(pos2-subset$pos2)<tolerance),0),
classification=ifelse(row==0,"None",subset$classification[row]),
svcf=(ccube_ccf1+ccube_ccf2)/2*p,
sample=s)%>%
filter(classification!="None")%>%   ## here, force the svclone SV to match SVCFit
select(sample, classification, svcf, CHROM, POS, pos2)
}
svcmp <- list.files("~/Karchin Lab Dropbox/YunZhou Liu/SVCFit-2024/script/sv/visor/svc_m_rdata/", full.names = T)
svcsp <- list.files("~/Karchin Lab Dropbox/YunZhou Liu/SVCFit-2024/script/sv/visor/svc_s_rdata/", full.names = T)
svcs <- lapply(svcsp, function(x) get_svclone(x,svs))%>%
do.call(rbind,.)%>%
mutate(method = "SVclone")
svcm <- lapply(svcmp, function(x) get_svclone(x,svm))%>%
do.call(rbind,.)%>%
mutate(method = "SVclone")
svcm=attach_clone(svcm,truth)
## merged SVCFit and SVclone
combined_svs <- svs %>%
select(sample, classification, svcf, CHROM, POS, pos2, method)%>%
rbind(svcs) %>%
mutate(true_svcf = as.integer(gsub(".*p","",sample))/100,
deviation=svcf-true_svcf)
combined_svm <- svm %>%
select(sample, classification, svcf, CHROM, POS, pos2, clone_num, method)%>%
rbind(svcm)%>%
mutate(clone_por = case_when(clone_num == "clone1" ~ 0.6, ##mannually assigned clone purity
clone_num == "clone2" ~ 0.3,
clone_num == "clone3" ~ 1),
true_svcf = as.integer(gsub(".*p","",sample))/100*clone_por,
deviation=svcf-true_svcf)
comb_stat=combined_svs %>%
mutate(clone_num="single",
clone_por=100)%>%
rbind(combined_svm)%>%
mutate(purity = paste0(gsub(".*p","",sample), "% purity"),
clone_prop = case_when(clone_num == "clone1" ~ "Child 1 (60% tumor cell)",
clone_num == "clone2" ~ "Child 2 (30% tumor cell)",
clone_num == "clone3" ~ "Parent (100% tumor cell)",
clone_num == "single" ~ "Single clone"))%>%
group_by(purity,clone_prop, classification)%>%
wilcox_test(deviation~method)%>%
#adjust_pvalue(method = "bonferroni") %>%
add_significance()%>%
add_xy_position(x = "classification")
p_levels <- c('100% purity', '80% purity', '60% purity', '40% purity', '20% purity')
c_levels <- c("Single clone","Parent (100% tumor cell)","Child 1 (60% tumor cell)","Child 2 (30% tumor cell)")
f1a=combined_svs%>%
mutate(clone_num="single",
clone_por=100)%>%
rbind(combined_svm)%>%
mutate(purity = paste0(gsub(".*p","",sample), "% purity"),
clone_prop = case_when(clone_num == "clone1" ~ "Child 1 (60% tumor cell)",
clone_num == "clone2" ~ "Child 2 (30% tumor cell)",
clone_num == "clone3" ~ "Parent (100% tumor cell)",
clone_num == "single" ~ "Single clone"))%>%
ggplot(aes(x=classification, y=deviation))+
geom_boxplot(aes(color = method, fill=method),alpha = 0.5)+
facet_grid(factor(purity, level = p_levels)~ factor(clone_prop, level = c_levels),scale = "free")+
stat_pvalue_manual(comb_stat, hide.ns = TRUE)+
ylab("Error")+
xlab("Structural variant types")+
theme_bw()+
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
legend.position = "none",
strip.text = element_text(size = 7))
f1a
# svclone_in <- read.delim("/Users/lyz928/Karchin\ Lab\ Dropbox/YunZhou\ Liu/SVCFit-2024/script/sv/svclone_time.txt", header=FALSE)
svclone_in <- read.delim("Figure_1/svclone_time.txt", header=FALSE)
colnames(svclone_in) = c("sample","start","end")
svc = svclone_in %>%
filter(end !="")%>%
mutate(num_sv=as.integer(gsub("speed_(.*)","\\1",sample)),
start = gsub("EST ","",start),
start = gsub(" (.*) ","\\1", start),
end = gsub("EST","",end),
end = gsub(" (.*) ","\\1", end),
start = as.POSIXct(start, format = "%a %b %d %I:%M:%S %p %Y"),
end = as.POSIXct(end, format = "%a %b %d %I:%M:%S %p %Y"),
time = as.numeric(difftime(end, start, units = "secs")),
#time = as.integer(end - start),
method = "svclone")%>%
arrange(num_sv)
svcfit_in <- read.delim("Figure_1/svcfit_time.txt", header=FALSE)
colnames(svcfit_in) = c("sample","start","end")
svcf = svcfit_in %>%
mutate(num_sv=as.integer(gsub("speed_(.*).vcf","\\1",sample)),
start = as.POSIXct(start, format="%a %b %d %H:%M:%S %Y",units = "secs"),
end = as.POSIXct(end, format="%a %b %d %H:%M:%S %Y",units = "secs"),
time = as.integer(end - start),
method = "svcfit") %>%
filter(num_sv %in% svc$num_sv)%>%
arrange(num_sv)
# ggplot(aes(x=num_sv, y = time))+
# geom_point()+
# geom_smooth(method = "lm")
p=rbind(svc, svcf)%>%
#svc%>%
#filter(num_sv<10000)%>%
ggplot(aes(x=num_sv, y = time, color = method, group=method))+
geom_point()+
geom_smooth(method = "glm", aes(color=method),show.legend = FALSE)+
scale_y_log10()+
ylab("time (sec)")+
xlab("number of structural variants")+
theme_bw()+
theme(panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
legend.title = element_blank(),
legend.position = "none")+
guides(color = guide_legend(override.aes = list(shape = 15, size = 6)))
p
f1a
