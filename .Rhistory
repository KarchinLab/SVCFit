if(simulation){
ground_truth=ifelse(is.null(truth_path), "/Users/lyz928/Karchin Lab Dropbox/YunZhou Liu/SVCFit-2024/script/sv/visor/input/", truth_path)
p <- list.files(ground_truth, pattern = "^c.*.bed", full.names = T)
truth = read_clone(p)
}else{
truth=data.frame()
}
# filer SV based on simulation ground truth and overlaps
if(simulation & overlap){
over=check_overlap(vcf, vcf)
checked=check_overlap(over, truth)
}else if(simulation & !overlap){
checked=check_overlap(vcf, truth)
}else if((!simulation) & overlap){
checked=check_overlap(vcf, vcf)
}else{
checked=vcf
}
#calculate svcf
if(tumor_only==FALSE){
output <- checked %>%
dplyr::filter(!classification%in%c("INS","BND"))%>%
dplyr::mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", round(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
dplyr::select(sample, CHROM,POS,ID,REF,ALT,QUAL,FILTER,INFO,FORMAT,normal,tumor,classification,pos2,vaf, tcn, inferred_icn, svcf)
}else{
output <- checked %>%
dplyr::filter(!classification%in%c("INS","BND"))%>%
dplyr::mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", round(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
dplyr::select(sample, CHROM,POS,ID,REF,ALT,QUAL,FILTER,INFO,FORMAT,tumor,classification,pos2,vaf, tcn, inferred_icn, svcf)
}
if(multiple&simulation&nrow(truth)>0){ # make sure truth is loaded
output = attach_clone(output, truth)
}
return(output)
}
single = SVCFit(vcf_path="~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s32.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)
multiple = SVCFit("~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s35.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)
View(single)
View(multiple)
View(single)
ps=single %>%
ggplot()+
geom_density(aes(x=svcf), bw="sj")
ps
ps=single %>%
ggplot()+
geom_density(aes(x=svcf))
ps
multiple %>%
ggplot()+
geom_density(aes(x=svcf))
multiple %>%
ggplot()+
geom_density(aes(x=svcf))
multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
multiple %>%
ggplot()+
geom_density(aes(x=svcf))
single = SVCFit(vcf_path="~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s32.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
multiple = SVCFit("~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s35.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
multiple %>%
ggplot()+
geom_density(aes(x=svcf))
single %>%
ggplot()+
geom_density(aes(x=svcf))
single = SVCFit(vcf_path="~/Downloads/single_vcf/c40p90.0s1.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single %>%
ggplot()+
geom_density(aes(x=svcf))
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
single = SVCFit(vcf_path="~/Downloads/single_vcf/c40p90.0s10.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
single = SVCFit(vcf_path="~/Downloads/single_vcf/c40p90.0s14.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
single = SVCFit(vcf_path="~/Downloads/single_vcf/c40p90.0s15.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
single = SVCFit(vcf_path="~/Downloads/single_vcf/c40p90.0s16.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
single = SVCFit(vcf_path="~/Downloads/single_vcf/c40p80.0s17.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(x=0.8))
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.8))
single = SVCFit(vcf_path="~/Downloads/single_vcf/c40p50.0s22.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.8))
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))
single %>%
filter(classification != "DUP")%>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))
multiple = SVCFit("~/Downloads/multiple_vcfs/c50p50.0s18.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)
multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))
library(ggpubr)
combined_plot <- ggarrange(ps,
pm,
nrow = 1,
ncol = 2)
library(gridExtra)
library(ggpubr)
library(gridExtra)
grid.arrange(ps, pm, nrow = 1, ncol = 2)
ps=single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
title("example density plot for a single-clone tumor sample")
pm=multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
title("example density plot for a multiple-clone tumor sample")
ps=single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("example density plot for a single-clone tumor sample")
pm=multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("example density plot for a multiple-clone tumor sample")
grid.arrange(ps, pm, nrow = 1, ncol = 2)
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("example density plot for a single-clone tumor sample")+
theme(plot.title = element_text(size = 16))
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("example density plot for a single-clone tumor sample")+
theme(plot.title = element_text(size = 8))
single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("example density plot for a single-clone tumor sample")+
theme(plot.title = element_text(size = 10))
ps=single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("example density plot for a single-clone tumor sample")+
theme(plot.title = element_text(size = 10))
pm=multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("example density plot for a multiple-clone tumor sample")+
theme(plot.title = element_text(size = 10))
library(gridExtra)
grid.arrange(ps, pm, nrow = 1, ncol = 2)
ps=single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("single-clone tumor sample")+
theme(plot.title = element_text(size = 11))
library(gridExtra)
grid.arrange(ps, pm, nrow = 1, ncol = 2)
ps=single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("single-clone tumor sample")+
theme(plot.title = element_text(size = 11))
pm=multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("multiple-clone tumor sample")+
theme(plot.title = element_text(size = 11))
library(gridExtra)
grid.arrange(ps, pm, nrow = 1, ncol = 2)
setwd("~/Documents/GitHub/SVCFit")
devtools::install()
devtools::document()
devtools::document()
devtools::install()
person("Yunzhou", "Liu", , "yliu498@jh,edu", role = c("aut", "cre"))
devtools::install()
devtools::install()
devtools::install()
devtools::build()
devtools::document()
library(SVCFit)
?SVCFit
?extract_info
vignette(package="SVCFit")
vignette("SVCFit_guide",package="SVCFit")
usethis::use_vignette("tmp")
remove.packages("SVCFit")
setwd("~/Documents/GitHub/SVCFit")
devtools::install()
library(SVCFit)
library(SVCFit)
library(tidyverse)
library(ggplot2)
library(gridExtra)
example_vcf <- read.table("~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s35.bed.vcf", quote="\"")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
vcf=extract_info("~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s35.bed.vcf", tumor_only=TRUE, length_filter=0)
str(vcf)
cat(paste0("After this step, the vcf now has ",nrow(vcf)," structural variants"))
example_vcf <- read.table("~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s32.bed.vcf", quote="\"")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
vcf=extract_info("~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s32.bed.vcf", tumor_only=TRUE, length_filter=0)
str(vcf)
cat(paste0("After this step, the vcf now has ",nrow(vcf)," structural variants"))
print(example_vcf[35,])
View(vcf)
print(example_vcf[35,1:7])
colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
print(example_vcf[35,1:7])
checked=check_overlap(vcf, vcf)
cat(paste0("After checking overlaps, the vcf now has ",nrow(checked)," structural variants"))
output <- checked %>%
dplyr::filter(!classification%in%c("INS","BND"))%>%
dplyr::mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", round(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
dplyr::select(sample, CHROM,POS,ID,REF,ALT,QUAL,FILTER,INFO,FORMAT,tumor,classification,pos2,vaf,tcn,inferred_icn,svcf)
print(paste0("After this step, the vcf now has ",nrow(vcf)," structural variants"))
setwd("~/Documents/GitHub/SVCFit")
usethis::use_readme_md()
usethis::use_readme_rmd()
example_vcf <- read.table("~/Documents/GitHub/SVCFit/inst/extdata/c50p70.0s32.bed.vcf", quote="\"")
View(example_vcf)
example_vcf=data.frame(CHROM=c("chr1","chr2"), POS=c(1000, 5000), ID=c(MantaINV:6:0:1:0:0:0,MantaDEL:7:0:1:0:0:0), REF=c("T","G"), ALT=c("<INV>","<DEL>"), QUAL=c(".","."), FILTER=c("PASS","PASS"),INFO=c("END=1500;SVTYPE=INV;SVLEN=500","END=5300;SVTYPE=DEL;SVLEN=300"), FORMAT=c("PR:SR","PR"),tumor=c("20,30:19,27", "15,30"))
example_vcf=data.frame(CHROM=c("chr1","chr2"), POS=c(1000, 5000), ID=c("MantaINV:6:0:1:0:0:0","MantaDEL:7:0:1:0:0:0"), REF=c("T","G"), ALT=c("<INV>","<DEL>"), QUAL=c(".","."), FILTER=c("PASS","PASS"),INFO=c("END=1500;SVTYPE=INV;SVLEN=500","END=5300;SVTYPE=DEL;SVLEN=300"), FORMAT=c("PR:SR","PR"),tumor=c("20,30:19,27", "15,30"))
View(example_vcf)
# colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
# colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
print(example_vcf)
# colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
example_vcf
# colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
View(example_vcf)
devtools::build_readme()
devtools::check()
remove.packages("SVCFit")
setwd("~/Documents/GitHub/SVCFit")
setwd("~/Documents/GitHub/SVCFit")
devtools::document()
devtools::check()
usethis::use_mit_license("Yunzhou Liu")
devtools::install()
library(SVCFit)
example_vcf <- read.table("inst/extdata/c50p70.0s32.bed.vcf", quote="\"")
setwd("~/Documents/GitHub/SVCFit")
getwd()
example_vcf <- read.table("../inst/extdata/c50p70.0s32.bed.vcf", quote="\"")
colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
vcf=extract_info("../inst/extdata/c50p70.0s32.bed.vcf", tumor_only=TRUE, length_filter=0)
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
rmarkdown::render("vignettes/SVCFit_guide.Rmd")
detach("package:SVCFit", unload = TRUE)
devtools::document()
rmarkdown::render("vignettes/SVCFit_guide.Rmd")
? dplyr
?SVCFit
devtools::document()
devtools::build_readme()
devtools::document()
remove.packages("SVCFit")
setwd("~/Documents/GitHub/SVCFit")
devtools::install()
detach("package:SVCFit", unload = TRUE)
library(SVCFit)
detach("package:SVCFit", unload = TRUE)
library(SVCFit)
#library(tidyverse)
library(ggplot2)
library(gridExtra)
library(SVCFit)
#library(tidyverse)
library(ggplot2)
library(gridExtra)
example_vcf <- read.table("../inst/extdata/c50p70.0s32.bed.vcf", quote="\"")
colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
vcf=extract_info("../inst/extdata/c50p70.0s32.bed.vcf", tumor_only=TRUE, length_filter=0)
str(vcf)
devtools::build_vignettes()
library(SVCFit)
library(ggplot2)
library(gridExtra)
example_vcf <- read.table("../inst/extdata/c50p70.0s32.bed.vcf", quote="\"")
colnames(example_vcf)=c("CHROM",  "POS",     "ID",      "REF",     "ALT",     "QUAL",    "FILTER",  "INFO",    "FORMAT", "tumor")
#system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
str(example_vcf)
vcf=extract_info("../inst/extdata/c50p70.0s32.bed.vcf", tumor_only=TRUE, length_filter=0)
str(vcf)
print(example_vcf[35,1:7])
checked=check_overlap(vcf, vcf)
str(checked)
output <- checked %>%
dplyr::filter(!classification%in%c("INS","BND"))%>%
dplyr::mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", round(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
dplyr::select(sample, CHROM,POS,ID,REF,ALT,QUAL,FILTER,INFO,FORMAT,tumor,classification,pos2,vaf,tcn,inferred_icn,svcf)
output <- checked %>%
filter(!classification%in%c("INS","BND"))%>%
mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", round(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
select(sample, CHROM,POS,ID,REF,ALT,QUAL,FILTER,INFO,FORMAT,tumor,classification,pos2,vaf,tcn,inferred_icn,svcf)
output <- checked %>%
filter(!classification%in%c("INS","BND"))%>%
mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", round(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
select(sample, CHROM,POS,ID,REF,ALT,QUAL,FILTER,INFO,FORMAT,tumor,classification,pos2,vaf,tcn,inferred_icn,svcf)
library(SVCFit)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(gridExtra)
output <- checked %>%
filter(!classification%in%c("INS","BND"))%>%
mutate(vaf = alt/(alt+0.5*ref),
tcn= ifelse(classification =="DUP", (4*alt+2*ref)/ref, 2),
inferred_icn = ifelse(classification=="DUP", round(tcn*vaf+2),2),
svcf = ifelse(inferred_icn<4, tcn*vaf, tcn*vaf/(inferred_icn-2)))%>%
select(sample, CHROM,POS,ID,REF,ALT,QUAL,FILTER,INFO,FORMAT,tumor,classification,pos2,vaf,tcn,inferred_icn,svcf)
single = SVCF(vcf_path="inst/extdata/c40p50.0s22.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
single = SVCF("../inst/extdata/c40p50.0s22.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
multiple = SVCF("../inst/extdata/c50p50.0s18.bed.vcf",
tumor_only = TRUE, overlap = TRUE, simulation=FALSE)%>%
filter(svcf<1.1)
ps=single %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("single-clone tumor sample")+
theme(plot.title = element_text(size = 11))
pm=multiple %>%
ggplot()+
geom_density(aes(x=svcf))+
xlim(0,1.2)+
geom_vline(aes(xintercept=0.5))+
ggtitle("multiple-clone tumor sample")+
theme(plot.title = element_text(size = 11))
grid.arrange(ps, pm, nrow = 1, ncol = 2)
devtools::build_vignettes()
rmarkdown::render("vignettes/SVCFit_guide.Rmd")
vignette("SVCFit_guide", package = "SVCFit")
vignette("SVCFit_guide", package = "SVCFit")
rmarkdown::render("vignettes/SVCFit_guide.Rmd")
devtools::build_vignettes()
devtools::clean()
devtools::build_vignettes()
devtools::document()
remove.packages("SVCFit")
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(SVCFit)
library(tidyverse)
library(ggplot2)
library(gridExtra)
file_path <- system.file("extdata", "c50p70.0s32.bed.vcf", package = "SVCFit")
example_vcf <- read.table(file_path, quote="\"")
s_path <- system.file("extdata", "c40p50.0s22.bed.vcf", package = "SVCFit")
m_path <- system.file("extdata", "c50p50.0s18.bed.vcf", package = "SVCFit")
devtools::check()
devtools::build_vignettes()
install.packages("pak")
pak::pak("KarchinLab/SVCFit")
usethis::use_git_config(user.name = "lyz9928", user.email = "yliu498@jh.edu")
usethis::create_github_token()
credentials::set_github_pat()
credentials::set_github_pat()
#now remotes::install_github() will work
remotes::install_github("username/privaterepo")
remotes::install_github("KarchinLab/SVCFit")
library(SVCFit)
vignette("SVCFit_guide", package = "SVCFit")
devtools::build_readme()
